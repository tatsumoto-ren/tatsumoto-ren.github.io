# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying
  deploy-gh:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Copy website to ./_site
        shell: bash
        run: ./scripts/copy_site.sh

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload the site folder
          path: '_site'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Save _site dir
        id: cache-save
        uses: actions/cache/save@v4
        with:
          path: '_site'
          key: site-${{ github.sha }}

  deploy-s3:
    needs: [deploy-gh]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Restore _site dir
        id: cache-restore
        uses: actions/cache/restore@v4
        with:
          path: '_site'
          key: site-${{ github.sha }}
          fail-on-cache-miss: true

      # https://github.com/AnimMouse/setup-rclone/tree/main?tab=readme-ov-file#usage
      # Encode the rclone.conf file in Base64 using this command: `base64 -w 0 rclone.conf`
      # and paste it to RCLONE_CONFIG secret.
      - name: Setup Rclone
        uses: AnimMouse/setup-rclone@ef6294e97b6f0cbeb6f1a682a15d35a91dd5d0ff
        with:
          rclone_config: ${{ secrets.RCLONE_CONFIG }}

      - name: Rclone from _site to remote
        shell: bash
        run: ./scripts/rclone_sync.sh
